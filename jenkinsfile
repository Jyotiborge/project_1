properties([
     parameters([
        choice(
             choices: ['validate','Build-Docker', 'Run-ec2-instance'],
             description: 'Enter job type',
             name: 'Job_Type'
            ),
        choice(
             choices: ['', '1', '2', '3', '4','5'],
             description: 'Enter Product Name',
             name: 'Product_Name'
            ),
        choice(
             choices: ['', '1', '', '3' ],
             description: 'Enter Product version',
             name: 'Product_Version'
            ),
        ])
])

pipeline {
    agent {
        docker {
            image 'registryurl'
        }
    }

    environment {
        
        // INSTALL_DIR = '/jenkins'
        FILES_DIR = ''
        GIT_URL = '@github.build.ge.com/gehc-web/hc-ws-azure-devops.git'
        GIT_BRANCH = 'master'
        VAR1 = "${params.Product_Name}"
        VAR2 = "${params.Product_Version}"
        VAR3 = "${params.Product_Release_Version}"
        // PKR_FILE = "pkr-hcws-main.json"
        
    }

    stages {
        stage('Input out') {
            steps {
                script {
                    sh """
                        echo "Installation directory : $INSTALL_DIR \n
                        File directory             : $FILES_DIR \n
                        Packer file to be executed : $PKR_FILE \n
                        Git url                    : $GIT_URL \n
                        GIT Branch                 : $GIT_BRANCH \n
                        Build Number               : ${env.BUILD_ID} \n
                        Job_Type                   : ${Job_Type} \n
                        Job                        : ${params.Product_Name} \n
                        Job-Product-version        : ${params.Product_Version} \n
                        release_ver                : ${params.Product_Release_Version} \n
                        test1                      : $VAR1 "
                    """
                }
            }
        }
        stage('Copying artifact') {
            steps {
                withCredentials([usernamePassword(credentialsId: '_git-hcws', passwordVariable: 'token', usernameVariable: 'username')]) {
                script {
                    sh """
                        mkdir -p $INSTALL_DIR && cd $INSTALL_DIR && \
                        git clone -b $GIT_BRANCH "http://${username}:${token}$GIT_URL" && \
                        pwd && ls -altr && \
                        cd $FILES_DIR && \
                        printf "============executing $PKR_FILE=============== "
                    """
                }
            }
            }
        }

        stage('Validate') {
            when {
                expression { params.Job_Type == 'validate' }
            }
            steps {
                script {
                    sh '''
                        
                        }
                        fi
                    '''
                }
            }
        }
        stage('Build Docker') {
            when {
                expression { params.Job_Type == 'build to prod' }
            }
            steps {
                script {
                    sh '''
                        cd $INSTALL_DIR/$FILES_DIR

                    '''
                }
            }
        }
    }
    post {

        
        always {
            cleanWs()
            dir("${workspace}@tmp") {
                deleteDir()
            }
        
            dir("${workspace}@script") {
                deleteDir()
            }
        }
    }
}